// Code generated by "enumer -type=LoadType"; DO NOT EDIT.

//
package main

import (
	"fmt"
)

const _LoadTypeName = "AnswerHintKeyUpdate"

var _LoadTypeIndex = [...]uint8{0, 6, 10, 19}

func (i LoadType) String() string {
	if i < 0 || i >= LoadType(len(_LoadTypeIndex)-1) {
		return fmt.Sprintf("LoadType(%d)", i)
	}
	return _LoadTypeName[_LoadTypeIndex[i]:_LoadTypeIndex[i+1]]
}

var _LoadTypeValues = []LoadType{0, 1, 2}

var _LoadTypeNameToValueMap = map[string]LoadType{
	_LoadTypeName[0:6]:   0,
	_LoadTypeName[6:10]:  1,
	_LoadTypeName[10:19]: 2,
}

// LoadTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func LoadTypeString(s string) (LoadType, error) {
	if val, ok := _LoadTypeNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to LoadType values", s)
}

// LoadTypeValues returns all values of the enum
func LoadTypeValues() []LoadType {
	return _LoadTypeValues
}

// IsALoadType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i LoadType) IsALoadType() bool {
	for _, v := range _LoadTypeValues {
		if i == v {
			return true
		}
	}
	return false
}
